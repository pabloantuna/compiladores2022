let pred (x : Nat) : Nat = x - 1
let succ (x : Nat) : Nat = x + 1
let rec fib (x : Nat) : Nat = ifz
  x
  then
  1
  else
  ifz pred x then 1 else (fib (x - 1)) + (fib (x - 2))
let rec ack (m n : Nat) : Nat = ifz
  m
  then
  succ n
  else
  ifz n then ack (pred m) 1 else ack (pred m) (ack m (pred n))
let dead (x : Nat) : Nat = x + x
let l  : Nat = 1
let r  : Nat = 2
let n1  : Nat = 6 - (ack 1 2)
let big (x : Nat) : Nat = succ (succ (succ (succ (succ x))))
let rec small (x : Nat) : Nat = x + 5
let n2  : Nat = (small (small (small (small (small 2))))) + (big 2)
let DEBUG  : Nat = 1
let f2 (x : Nat) : Nat = x + 5
let f1 (x : Nat) : Nat = f2 x
let x  : Nat = f1 5
let n3  : Nat = print ((ack 3 2) + (n2 + x))
